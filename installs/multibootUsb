      //// You can follow this for a general idea, but seem not to be working correctly


      For LINUX
      Needs Grub (if you don't have it one your system, you can search the web (to no avail for my kali) or make a live Fedora usb bootable. Even there one more step might need to be done, but it will be explained below.
      And carefull reading. Reason below

      //// If you only want the commands, search for the pattern "> ", as this is how all of them start, and it shouldn't be used somewhere else

o Making a multiboot usb
For this, I will copy-paste the commands and try to provide an explanation to the best of my understanding.

//The device will be prepared in this guide using the traditional msdos layout.
//We will install grub bootloader in both EFI and legagy mode (BIOS) to be able to start in both UEFI and BIOS mode.
// Guide resumed from https://linuxconfig.org/how-to-create-multiboot-usb-with-linux
// For the instructions, we assume that the USB is located at /dev/sdb


- We need to configure grub so that we have something that would let us choose between OSs. We will need 2 partitions:
- - One for the partition tables. In EFI mode. This is where we install grub-efi. We need to format this with a fat32.
- - One for the data (the ISO images to be stored). This will be formatter with something that is supported by grub

// This command creates the partition table for msdos on the devices
> sudo parted -s /dev/sdb mklabel msdos

// After creating the partition table, we need the actual partition. Here size is given in Mibibytes. 1MiB=1024KiB (this would be against the 1MB=1000KB)
// 550MiB is the recomended size for the parition
> sudo parted -s /deb/sdb mkpart primary 1MiB 551MiB

// We activate the esp and boot flags
> sudo parted -s /dev/sdb set 1 esp on
> sudo parted -s /dev/sdb set 1 boot on

// Then we create the fat32 filesystem
> sudo mkfs.fat -F32 /dev/sdb1

// We then created the other partition to hold ISO files and grub configuration files
// We can just use the entire rest of the partition. We set it from the last position 551MiB up to end
> sudo parted -s /dev/sdb mkpart primary 551MiB 100%

// Then we format this new partition to use ext4
> sudo mkfs.ext4 /dev/sdb2

// To install grub and put the iso files in place we will need to mount the EFI and data parition somewhere in out system.
> sudo mkdir /media/efi
> sudo mkdir /media/data
> sudo mount /dev/sdb1 /media/efi
> sudo mount /dev/sdb2 /media/data


- In order to boot in both UEFI and BIOS, we will need to install grub and grub for efi.
// In my case, I don't have grub on my system, so I need to somehow install it.
// For this I paused my installation, made a Fedora bootable usb using a live image (so that I don't have to install the whole OS)
// I used Fedore Live ISO from here https://fedoraproject.org/workstation/download
// Which has the direct download link, which I don't necesarily recommend to click since it might be too old for when you read this (currently summer of 2024) but it might prove usefull: https://download.fedoraproject.org/pub/fedora/linux/releases/40/Workstation/x86_64/iso/Fedora-Workstation-Live-x86_64-40-1.14.iso
- If grub is not installed and you can't find a way to install it, then one option even if a bit of a longer route, is to quickly make a bootable USB with Fedora
- - Download Fedora Live Image (as you don't need to install the OS). If on linux then just do > "sudo dd if='path to fedora image' of='path to usb, like /dev/sdc' bs=4M conv=fsync status=progress"
- - You should have a bootable usb with fedora in no time. For other OSs maybe balena etcher can help in making a bootable usb. BEWARE though that the you need to copy the important information from the usb before making it bootable.
- - Fedora has grub2 by default. At least in the summer of 2024.
- - In case you have doubts about how to make a bootable usb with one OS, better search the internet 
- - After installing Fedora, I only had '/usr/lib/grub/i386-pc'. But I also need '/usr/lib/grub/x86_64-efi'. To overcome this:
- - - (on fedore dnf seems to used instead of apt) I ran > "dnf provides /usr/lib/grub/x86_64-efi". This gave me 2 module names which would contain x86_64-efi:
- - - grub2-efi-x64-modules-1:2.06-119.fc40.noarch 
- - - grub2-efi-x64-modules-1:2.06-123.fc40.noarch
- - - I chosed the later one to run: > 'sudo dnf install grub2-efi-x64-modules-1:2.06-123.fc40.noarch'
- - - After this command, now I have the x86_64-efi in the "/usr/lib/grub"
- - I had to remount my usb by recreating the directoried from /media/efi (just a couple of stept above).
- - > sudo mkdir /media/efi && sudo mkdir /media/data && sudo mount /dev/sdb1 /media/efi && sudo mount /dev/sdb2 /media/data
- Then I continued with the installation procress

// Install grub for i386-pc. We install it on "/media/data/boot". "/media/data" is the dir made by us pointing to /dev/sdb2, in which we tell it to automatically create the "boot" directory if it does not exist.
// Here we use /dev/sdb in the command instead of /dev/sdb2. (copied from the tutorial)
> sudo grub2-install \
      --target=i386-pc \
      --recheck \
      --boot-directory="/media/data/boot" /dev/sdb

// Now install grub for x86_64-efi. If you don't have it, look directly above "/media/efi" is the directory created by us point to /dev/sdb1, containing the fat32 partition. "/media/data/boot" is the data partition in which the "boot" directory is automatically created
// It needs --force because secure boot is not available for EFI platforms. I will try to deal with that someday. For the moment I just want my multiboot usb.
// Secure boot is important to not allow other programs to start when the boot process is happening.
> sudo grub2-install \
      --target=x86_64-efi \
      --recheck \
      --removable \
      --efi-directory="/media/efi" \
      --boot-directory="media/data/boot" \
      --force

// In the following, we will create the grub config files manually.
// First we need to create the directory to store the files
> sudo mkdir /media/data/boot/iso

// Then we need to either make ourselves owners of the given directory to move data dreely, or start the file explorer in root mode, or move files with "sudo mv" in terminal.
// I copied them with the below command and I did this for a couple different .iso files. All moved to the same /media/data/boot/iso folder.
> sudo cp "path to .iso file" /media/data/boot/iso

// Create the grub.cfg config in the /media/data/boot/grub2
> sudo vi /media/data/boot/grup2/grub.cfg

// Add the following in the file. "isofile=<sth>" sets a value with the name of isofile. Grub can boot directly from iso, and it can do that from the loop device
// isofile should have the
> menuentry "Fedora-Workstation-Live-x86_64-40-1.14" {
      isofile="/boot/iso/Fedora-Workstation-Live-x86_64-40-1.14"
      loopback loop "${isofile}"
      linux (loop)/isolinux/vmlinuz iso-scan/filename="${isofile}" inst.stage2=hd:LABEL=Fedora-WS-dvd-x86_64-28 quiet
      initrd (loop)/isolinux/initrd.img
  }

// Then adding another menu entry in the same file
> menuentry "kali-linux-2024.2-installer-purple-amd64" {
      isofile="/boot/iso/kali-linux-2024.2-installer-purple-amd64.iso"
      loopback loop "${isofile}"
      linux (loop)/casper/vmlinuz iso-scan/filename="${isofile}" boot=casper quiet splash ---
      initrd (loop)/casper/initrd
  }

// Now it should present both options at boot time



// So, basically
// There seems to be a mush of a set of instructions, but it can be simplified in the upper part by only using one partition and wipe the second one.
// The partition needs to still be primary and formatted with fat32
// I had some problems with grub when trying to install it on the usb, then rebooting only with the usb plugged to check grub instalation, it did not work unless I used only the x86_64-efi one. There are a lot of platforms grub supports. I believe mine needed that version. So it is still good if you have installed other versions, probably, to work with a bigger number of devices
// As of now, I can add menu entries, but clicking on them only gets me to an error screen where my only option is to press any key to go back. I have to find how to properly load the kernel and initrd. 
// The ISO files are kept at root, in a folder named "ISOs". Totally possible. The files needed for boot are in "/boot" and "/EFI" folders.
// Installing grub with either
      > grub-install --force --removable --target=x86_64-efi --boot-directory=/mnt/boot --efi-directory=/mnt /dev/sdX
      > grub-install --force --removable --target=i386-efi --boot-directory=/mnt/boot --efi-directory=/mnt /dev/sdX
      > grub-install --force --removable --target=i386-pc --boot-directory=/mnt/boot /dev/sdX
      Depending on which target you look for


